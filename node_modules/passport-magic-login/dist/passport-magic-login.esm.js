import jwt from 'jsonwebtoken';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var decodeToken = function decodeToken(secret, token) {
  if (typeof token !== 'string') {
    return false;
  }

  try {
    return jwt.verify(token, secret);
  } catch (err) {
    return false;
  }
};
var generateToken = function generateToken(secret, payload) {
  return jwt.sign(payload, secret, {
    expiresIn: '60min'
  });
};

var MagicLoginStrategy = /*#__PURE__*/function () {
  function MagicLoginStrategy(_options) {
    var _this = this;

    this._options = _options;
    this.name = 'magiclogin';

    this.send = function (req, res) {
      if (!req.body.destination) {
        res.status(400).send('Please specify the destination.');
        return;
      }

      var code = Math.floor(Math.random() * 90000) + 10000 + '';
      var jwt = generateToken(_this._options.secret, _extends({}, req.body, {
        code: code
      }));

      _this._options.sendMagicLink(req.body.destination, _this._options.callbackUrl + "?token=" + jwt, code, req).then(function () {
        res.json({
          success: true,
          code: code
        });
      })["catch"](function (error) {
        console.error(error);
        res.json({
          success: false,
          error: error
        });
      });
    };
    /** @deprecated */


    this.confirm = function (req, res) {
      console.warn("magicLink.confirm was removed in v1.0.7, it is no longer necessary.");
      res.redirect(_this._options.callbackUrl + "?token=" + req.query.token);
    };
  }

  var _proto = MagicLoginStrategy.prototype;

  _proto.authenticate = function authenticate(req) {
    var self = this;
    var payload = decodeToken(self._options.secret, req.query.token);

    var verifyCallback = function verifyCallback(err, user, info) {
      if (err) {
        return self.error(err);
      } else if (!user) {
        return self.fail(info);
      } else {
        return self.success(user, info);
      }
    };

    self._options.verify(payload, verifyCallback);
  };

  return MagicLoginStrategy;
}();

export default MagicLoginStrategy;
//# sourceMappingURL=passport-magic-login.esm.js.map
